<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="597.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="152"><g><title>perf (5 samples, 3.29%)</title><rect x="0.0000%" y="549" width="3.2895%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="559.50">perf</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="533" width="3.2895%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="543.50">[un..</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="517" width="3.2895%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="527.50">[un..</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="501" width="3.2895%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="511.50">[un..</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="485" width="3.2895%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="495.50">[un..</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="469" width="3.2895%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="479.50">[un..</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="453" width="3.2895%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="463.50">[un..</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="437" width="3.2895%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="447.50">[un..</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="421" width="3.2895%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="431.50">[un..</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="405" width="3.2895%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="415.50">[un..</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="389" width="3.2895%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="399.50">[un..</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="373" width="3.2895%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="383.50">[un..</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="357" width="3.2895%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="367.50">[un..</text></g><g><title>[unknown] (5 samples, 3.29%)</title><rect x="0.0000%" y="341" width="3.2895%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="351.50">[un..</text></g><g><title>[[heap]] (1 samples, 0.66%)</title><rect x="3.2895%" y="533" width="0.6579%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="1"/><text x="3.5395%" y="543.50"></text></g><g><title>sha2::sha256::soft::compress (1 samples, 0.66%)</title><rect x="3.2895%" y="517" width="0.6579%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="3.5395%" y="527.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (1 samples, 0.66%)</title><rect x="3.2895%" y="501" width="0.6579%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="3.5395%" y="511.50"></text></g><g><title>curve25519_dalek::backend::serial::scalar_mul::vartime_double_base::mul (1 samples, 0.66%)</title><rect x="3.9474%" y="517" width="0.6579%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="4.1974%" y="527.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::CompletedPoint::to_extended (1 samples, 0.66%)</title><rect x="3.9474%" y="501" width="0.6579%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="4.1974%" y="511.50"></text></g><g><title>[[stack]] (3 samples, 1.97%)</title><rect x="3.9474%" y="533" width="1.9737%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="3"/><text x="4.1974%" y="543.50">[..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (2 samples, 1.32%)</title><rect x="4.6053%" y="517" width="1.3158%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="2"/><text x="4.8553%" y="527.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (4 samples, 2.63%)</title><rect x="5.9211%" y="517" width="2.6316%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="4"/><text x="6.1711%" y="527.50">&lt;&amp;..</text></g><g><title>[unknown] (1 samples, 0.66%)</title><rect x="8.5526%" y="517" width="0.6579%" height="15" fill="rgb(221,5,38)" fg:x="13" fg:w="1"/><text x="8.8026%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.66%)</title><rect x="8.5526%" y="501" width="0.6579%" height="15" fill="rgb(247,18,42)" fg:x="13" fg:w="1"/><text x="8.8026%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.66%)</title><rect x="8.5526%" y="485" width="0.6579%" height="15" fill="rgb(241,131,45)" fg:x="13" fg:w="1"/><text x="8.8026%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.66%)</title><rect x="8.5526%" y="469" width="0.6579%" height="15" fill="rgb(249,31,29)" fg:x="13" fg:w="1"/><text x="8.8026%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.66%)</title><rect x="8.5526%" y="453" width="0.6579%" height="15" fill="rgb(225,111,53)" fg:x="13" fg:w="1"/><text x="8.8026%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.66%)</title><rect x="8.5526%" y="437" width="0.6579%" height="15" fill="rgb(238,160,17)" fg:x="13" fg:w="1"/><text x="8.8026%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.66%)</title><rect x="8.5526%" y="421" width="0.6579%" height="15" fill="rgb(214,148,48)" fg:x="13" fg:w="1"/><text x="8.8026%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.66%)</title><rect x="8.5526%" y="405" width="0.6579%" height="15" fill="rgb(232,36,49)" fg:x="13" fg:w="1"/><text x="8.8026%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.66%)</title><rect x="8.5526%" y="389" width="0.6579%" height="15" fill="rgb(209,103,24)" fg:x="13" fg:w="1"/><text x="8.8026%" y="399.50"></text></g><g><title>__libc_start_main (1 samples, 0.66%)</title><rect x="9.2105%" y="517" width="0.6579%" height="15" fill="rgb(229,88,8)" fg:x="14" fg:w="1"/><text x="9.4605%" y="527.50"></text></g><g><title>main (1 samples, 0.66%)</title><rect x="9.2105%" y="501" width="0.6579%" height="15" fill="rgb(213,181,19)" fg:x="14" fg:w="1"/><text x="9.4605%" y="511.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.66%)</title><rect x="9.2105%" y="485" width="0.6579%" height="15" fill="rgb(254,191,54)" fg:x="14" fg:w="1"/><text x="9.4605%" y="495.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.66%)</title><rect x="9.2105%" y="469" width="0.6579%" height="15" fill="rgb(241,83,37)" fg:x="14" fg:w="1"/><text x="9.4605%" y="479.50"></text></g><g><title>std::panicking::try (1 samples, 0.66%)</title><rect x="9.2105%" y="453" width="0.6579%" height="15" fill="rgb(233,36,39)" fg:x="14" fg:w="1"/><text x="9.4605%" y="463.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.66%)</title><rect x="9.2105%" y="437" width="0.6579%" height="15" fill="rgb(226,3,54)" fg:x="14" fg:w="1"/><text x="9.4605%" y="447.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.66%)</title><rect x="9.2105%" y="421" width="0.6579%" height="15" fill="rgb(245,192,40)" fg:x="14" fg:w="1"/><text x="9.4605%" y="431.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.66%)</title><rect x="9.2105%" y="405" width="0.6579%" height="15" fill="rgb(238,167,29)" fg:x="14" fg:w="1"/><text x="9.4605%" y="415.50"></text></g><g><title>std::panicking::try (1 samples, 0.66%)</title><rect x="9.2105%" y="389" width="0.6579%" height="15" fill="rgb(232,182,51)" fg:x="14" fg:w="1"/><text x="9.4605%" y="399.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.66%)</title><rect x="9.2105%" y="373" width="0.6579%" height="15" fill="rgb(231,60,39)" fg:x="14" fg:w="1"/><text x="9.4605%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.66%)</title><rect x="9.2105%" y="357" width="0.6579%" height="15" fill="rgb(208,69,12)" fg:x="14" fg:w="1"/><text x="9.4605%" y="367.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.66%)</title><rect x="9.2105%" y="341" width="0.6579%" height="15" fill="rgb(235,93,37)" fg:x="14" fg:w="1"/><text x="9.4605%" y="351.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.66%)</title><rect x="9.2105%" y="325" width="0.6579%" height="15" fill="rgb(213,116,39)" fg:x="14" fg:w="1"/><text x="9.4605%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.66%)</title><rect x="9.2105%" y="309" width="0.6579%" height="15" fill="rgb(222,207,29)" fg:x="14" fg:w="1"/><text x="9.4605%" y="319.50"></text></g><g><title>receive_sent::main (1 samples, 0.66%)</title><rect x="9.2105%" y="293" width="0.6579%" height="15" fill="rgb(206,96,30)" fg:x="14" fg:w="1"/><text x="9.4605%" y="303.50"></text></g><g><title>hecate::receiver::check_message (1 samples, 0.66%)</title><rect x="9.2105%" y="277" width="0.6579%" height="15" fill="rgb(218,138,4)" fg:x="14" fg:w="1"/><text x="9.4605%" y="287.50"></text></g><g><title>&lt;ed25519_dalek::public::PublicKey as signature::verifier::Verifier&lt;ed25519::Signature&gt;&gt;::verify (1 samples, 0.66%)</title><rect x="9.2105%" y="261" width="0.6579%" height="15" fill="rgb(250,191,14)" fg:x="14" fg:w="1"/><text x="9.4605%" y="271.50"></text></g><g><title>curve25519_dalek::edwards::EdwardsPoint::vartime_double_scalar_mul_basepoint (1 samples, 0.66%)</title><rect x="9.2105%" y="245" width="0.6579%" height="15" fill="rgb(239,60,40)" fg:x="14" fg:w="1"/><text x="9.4605%" y="255.50"></text></g><g><title>curve25519_dalek::backend::serial::scalar_mul::vartime_double_base::mul (1 samples, 0.66%)</title><rect x="9.2105%" y="229" width="0.6579%" height="15" fill="rgb(206,27,48)" fg:x="14" fg:w="1"/><text x="9.4605%" y="239.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::&lt;impl core::ops::arith::Sub&lt;&amp;curve25519_dalek::backend::serial::curve_models::ProjectiveNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::sub (1 samples, 0.66%)</title><rect x="9.2105%" y="213" width="0.6579%" height="15" fill="rgb(225,35,8)" fg:x="14" fg:w="1"/><text x="9.4605%" y="223.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.66%)</title><rect x="9.2105%" y="197" width="0.6579%" height="15" fill="rgb(250,213,24)" fg:x="14" fg:w="1"/><text x="9.4605%" y="207.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul::m (1 samples, 0.66%)</title><rect x="9.2105%" y="181" width="0.6579%" height="15" fill="rgb(247,123,22)" fg:x="14" fg:w="1"/><text x="9.4605%" y="191.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::&lt;impl core::ops::arith::Sub&lt;&amp;curve25519_dalek::backend::serial::curve_models::ProjectiveNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::sub (1 samples, 0.66%)</title><rect x="9.8684%" y="517" width="0.6579%" height="15" fill="rgb(231,138,38)" fg:x="15" fg:w="1"/><text x="10.1184%" y="527.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (1 samples, 0.66%)</title><rect x="10.5263%" y="517" width="0.6579%" height="15" fill="rgb(231,145,46)" fg:x="16" fg:w="1"/><text x="10.7763%" y="527.50"></text></g><g><title>open_verify (1 samples, 0.66%)</title><rect x="11.1842%" y="517" width="0.6579%" height="15" fill="rgb(251,118,11)" fg:x="17" fg:w="1"/><text x="11.4342%" y="527.50"></text></g><g><title>__GI___pread64_nocancel (1 samples, 0.66%)</title><rect x="11.1842%" y="501" width="0.6579%" height="15" fill="rgb(217,147,25)" fg:x="17" fg:w="1"/><text x="11.4342%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.66%)</title><rect x="11.1842%" y="485" width="0.6579%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="1"/><text x="11.4342%" y="495.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::ProjectiveNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (2 samples, 1.32%)</title><rect x="11.8421%" y="421" width="1.3158%" height="15" fill="rgb(209,12,38)" fg:x="18" fg:w="2"/><text x="12.0921%" y="431.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (2 samples, 1.32%)</title><rect x="11.8421%" y="405" width="1.3158%" height="15" fill="rgb(227,1,9)" fg:x="18" fg:w="2"/><text x="12.0921%" y="415.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul::m (1 samples, 0.66%)</title><rect x="12.5000%" y="389" width="0.6579%" height="15" fill="rgb(248,47,43)" fg:x="19" fg:w="1"/><text x="12.7500%" y="399.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::CompletedPoint::to_extended (2 samples, 1.32%)</title><rect x="13.1579%" y="421" width="1.3158%" height="15" fill="rgb(221,10,30)" fg:x="20" fg:w="2"/><text x="13.4079%" y="431.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (2 samples, 1.32%)</title><rect x="13.1579%" y="405" width="1.3158%" height="15" fill="rgb(210,229,1)" fg:x="20" fg:w="2"/><text x="13.4079%" y="415.50"></text></g><g><title>[unknown] (14 samples, 9.21%)</title><rect x="5.9211%" y="533" width="9.2105%" height="15" fill="rgb(222,148,37)" fg:x="9" fg:w="14"/><text x="6.1711%" y="543.50">[unknown]</text></g><g><title>receive_sent::main (5 samples, 3.29%)</title><rect x="11.8421%" y="517" width="3.2895%" height="15" fill="rgb(234,67,33)" fg:x="18" fg:w="5"/><text x="12.0921%" y="527.50">rec..</text></g><g><title>hecate::receiver::check_message (5 samples, 3.29%)</title><rect x="11.8421%" y="501" width="3.2895%" height="15" fill="rgb(247,98,35)" fg:x="18" fg:w="5"/><text x="12.0921%" y="511.50">hec..</text></g><g><title>&lt;ed25519_dalek::public::PublicKey as signature::verifier::Verifier&lt;ed25519::Signature&gt;&gt;::verify (5 samples, 3.29%)</title><rect x="11.8421%" y="485" width="3.2895%" height="15" fill="rgb(247,138,52)" fg:x="18" fg:w="5"/><text x="12.0921%" y="495.50">&lt;ed..</text></g><g><title>curve25519_dalek::edwards::EdwardsPoint::vartime_double_scalar_mul_basepoint (5 samples, 3.29%)</title><rect x="11.8421%" y="469" width="3.2895%" height="15" fill="rgb(213,79,30)" fg:x="18" fg:w="5"/><text x="12.0921%" y="479.50">cur..</text></g><g><title>curve25519_dalek::backend::serial::scalar_mul::vartime_double_base::mul (5 samples, 3.29%)</title><rect x="11.8421%" y="453" width="3.2895%" height="15" fill="rgb(246,177,23)" fg:x="18" fg:w="5"/><text x="12.0921%" y="463.50">cur..</text></g><g><title>&lt;curve25519_dalek::window::NafLookupTable5&lt;curve25519_dalek::backend::serial::curve_models::ProjectiveNielsPoint&gt; as core::convert::From&lt;&amp;curve25519_dalek::edwards::EdwardsPoint&gt;&gt;::from (5 samples, 3.29%)</title><rect x="11.8421%" y="437" width="3.2895%" height="15" fill="rgb(230,62,27)" fg:x="18" fg:w="5"/><text x="12.0921%" y="447.50">&lt;cu..</text></g><g><title>curve25519_dalek::edwards::EdwardsPoint::double (1 samples, 0.66%)</title><rect x="14.4737%" y="421" width="0.6579%" height="15" fill="rgb(216,154,8)" fg:x="22" fg:w="1"/><text x="14.7237%" y="431.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::ProjectivePoint::double (1 samples, 0.66%)</title><rect x="14.4737%" y="405" width="0.6579%" height="15" fill="rgb(244,35,45)" fg:x="22" fg:w="1"/><text x="14.7237%" y="415.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::square (1 samples, 0.66%)</title><rect x="14.4737%" y="389" width="0.6579%" height="15" fill="rgb(251,115,12)" fg:x="22" fg:w="1"/><text x="14.7237%" y="399.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (1 samples, 0.66%)</title><rect x="14.4737%" y="373" width="0.6579%" height="15" fill="rgb(240,54,50)" fg:x="22" fg:w="1"/><text x="14.7237%" y="383.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k::m (1 samples, 0.66%)</title><rect x="14.4737%" y="357" width="0.6579%" height="15" fill="rgb(233,84,52)" fg:x="22" fg:w="1"/><text x="14.7237%" y="367.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (1 samples, 0.66%)</title><rect x="15.1316%" y="261" width="0.6579%" height="15" fill="rgb(207,117,47)" fg:x="23" fg:w="1"/><text x="15.3816%" y="271.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (1 samples, 0.66%)</title><rect x="15.1316%" y="245" width="0.6579%" height="15" fill="rgb(249,43,39)" fg:x="23" fg:w="1"/><text x="15.3816%" y="255.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (1 samples, 0.66%)</title><rect x="15.1316%" y="229" width="0.6579%" height="15" fill="rgb(209,38,44)" fg:x="23" fg:w="1"/><text x="15.3816%" y="239.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (1 samples, 0.66%)</title><rect x="15.1316%" y="213" width="0.6579%" height="15" fill="rgb(236,212,23)" fg:x="23" fg:w="1"/><text x="15.3816%" y="223.50"></text></g><g><title>sha2::sha256::Engine256::finish (1 samples, 0.66%)</title><rect x="15.1316%" y="197" width="0.6579%" height="15" fill="rgb(242,79,21)" fg:x="23" fg:w="1"/><text x="15.3816%" y="207.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (1 samples, 0.66%)</title><rect x="15.1316%" y="181" width="0.6579%" height="15" fill="rgb(211,96,35)" fg:x="23" fg:w="1"/><text x="15.3816%" y="191.50"></text></g><g><title>sha2::sha256::Engine256::finish::{{closure}} (1 samples, 0.66%)</title><rect x="15.1316%" y="165" width="0.6579%" height="15" fill="rgb(253,215,40)" fg:x="23" fg:w="1"/><text x="15.3816%" y="175.50"></text></g><g><title>sha2::sha256::compress256 (1 samples, 0.66%)</title><rect x="15.1316%" y="149" width="0.6579%" height="15" fill="rgb(211,81,21)" fg:x="23" fg:w="1"/><text x="15.3816%" y="159.50"></text></g><g><title>sha2::sha256::x86::compress (1 samples, 0.66%)</title><rect x="15.1316%" y="133" width="0.6579%" height="15" fill="rgb(208,190,38)" fg:x="23" fg:w="1"/><text x="15.3816%" y="143.50"></text></g><g><title>sha2::sha256::soft::compress (1 samples, 0.66%)</title><rect x="15.1316%" y="117" width="0.6579%" height="15" fill="rgb(235,213,38)" fg:x="23" fg:w="1"/><text x="15.3816%" y="127.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (1 samples, 0.66%)</title><rect x="15.1316%" y="101" width="0.6579%" height="15" fill="rgb(237,122,38)" fg:x="23" fg:w="1"/><text x="15.3816%" y="111.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (1 samples, 0.66%)</title><rect x="15.1316%" y="85" width="0.6579%" height="15" fill="rgb(244,218,35)" fg:x="23" fg:w="1"/><text x="15.3816%" y="95.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.66%)</title><rect x="15.7895%" y="133" width="0.6579%" height="15" fill="rgb(240,68,47)" fg:x="24" fg:w="1"/><text x="16.0395%" y="143.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.66%)</title><rect x="15.7895%" y="117" width="0.6579%" height="15" fill="rgb(210,16,53)" fg:x="24" fg:w="1"/><text x="16.0395%" y="127.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.66%)</title><rect x="15.7895%" y="101" width="0.6579%" height="15" fill="rgb(235,124,12)" fg:x="24" fg:w="1"/><text x="16.0395%" y="111.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (1 samples, 0.66%)</title><rect x="15.7895%" y="85" width="0.6579%" height="15" fill="rgb(224,169,11)" fg:x="24" fg:w="1"/><text x="16.0395%" y="95.50"></text></g><g><title>sha2::sha256::soft::sha256msg1 (1 samples, 0.66%)</title><rect x="16.4474%" y="101" width="0.6579%" height="15" fill="rgb(250,166,2)" fg:x="25" fg:w="1"/><text x="16.6974%" y="111.50"></text></g><g><title>sha2::sha256::soft::sha256msg1::sigma0x4 (1 samples, 0.66%)</title><rect x="16.4474%" y="85" width="0.6579%" height="15" fill="rgb(242,216,29)" fg:x="25" fg:w="1"/><text x="16.6974%" y="95.50"></text></g><g><title>sha2::sha256::soft::shr (1 samples, 0.66%)</title><rect x="16.4474%" y="69" width="0.6579%" height="15" fill="rgb(230,116,27)" fg:x="25" fg:w="1"/><text x="16.6974%" y="79.50"></text></g><g><title>sha2::sha256::soft::schedule (2 samples, 1.32%)</title><rect x="16.4474%" y="117" width="1.3158%" height="15" fill="rgb(228,99,48)" fg:x="25" fg:w="2"/><text x="16.6974%" y="127.50"></text></g><g><title>sha2::sha256::soft::sha256msg2 (1 samples, 0.66%)</title><rect x="17.1053%" y="101" width="0.6579%" height="15" fill="rgb(253,11,6)" fg:x="26" fg:w="1"/><text x="17.3553%" y="111.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.66%)</title><rect x="17.1053%" y="85" width="0.6579%" height="15" fill="rgb(247,143,39)" fg:x="26" fg:w="1"/><text x="17.3553%" y="95.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::update (5 samples, 3.29%)</title><rect x="15.7895%" y="261" width="3.2895%" height="15" fill="rgb(236,97,10)" fg:x="24" fg:w="5"/><text x="16.0395%" y="271.50">&lt;D ..</text></g><g><title>&lt;sha2::sha256::Sha256 as digest::Update&gt;::update (5 samples, 3.29%)</title><rect x="15.7895%" y="245" width="3.2895%" height="15" fill="rgb(233,208,19)" fg:x="24" fg:w="5"/><text x="16.0395%" y="255.50">&lt;sh..</text></g><g><title>sha2::sha256::Engine256::update (5 samples, 3.29%)</title><rect x="15.7895%" y="229" width="3.2895%" height="15" fill="rgb(216,164,2)" fg:x="24" fg:w="5"/><text x="16.0395%" y="239.50">sha..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::input_blocks (5 samples, 3.29%)</title><rect x="15.7895%" y="213" width="3.2895%" height="15" fill="rgb(220,129,5)" fg:x="24" fg:w="5"/><text x="16.0395%" y="223.50">blo..</text></g><g><title>sha2::sha256::Engine256::update::{{closure}} (5 samples, 3.29%)</title><rect x="15.7895%" y="197" width="3.2895%" height="15" fill="rgb(242,17,10)" fg:x="24" fg:w="5"/><text x="16.0395%" y="207.50">sha..</text></g><g><title>sha2::sha256::compress256 (5 samples, 3.29%)</title><rect x="15.7895%" y="181" width="3.2895%" height="15" fill="rgb(242,107,0)" fg:x="24" fg:w="5"/><text x="16.0395%" y="191.50">sha..</text></g><g><title>sha2::sha256::x86::compress (5 samples, 3.29%)</title><rect x="15.7895%" y="165" width="3.2895%" height="15" fill="rgb(251,28,31)" fg:x="24" fg:w="5"/><text x="16.0395%" y="175.50">sha..</text></g><g><title>sha2::sha256::soft::compress (5 samples, 3.29%)</title><rect x="15.7895%" y="149" width="3.2895%" height="15" fill="rgb(233,223,10)" fg:x="24" fg:w="5"/><text x="16.0395%" y="159.50">sha..</text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (4 samples, 2.63%)</title><rect x="16.4474%" y="133" width="2.6316%" height="15" fill="rgb(215,21,27)" fg:x="25" fg:w="4"/><text x="16.6974%" y="143.50">sh..</text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (2 samples, 1.32%)</title><rect x="17.7632%" y="117" width="1.3158%" height="15" fill="rgb(232,23,21)" fg:x="27" fg:w="2"/><text x="18.0132%" y="127.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (1 samples, 0.66%)</title><rect x="18.4211%" y="101" width="0.6579%" height="15" fill="rgb(244,5,23)" fg:x="28" fg:w="1"/><text x="18.6711%" y="111.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (7 samples, 4.61%)</title><rect x="19.0789%" y="197" width="4.6053%" height="15" fill="rgb(226,81,46)" fg:x="29" fg:w="7"/><text x="19.3289%" y="207.50">curve..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k::m (7 samples, 4.61%)</title><rect x="19.0789%" y="181" width="4.6053%" height="15" fill="rgb(247,70,30)" fg:x="29" fg:w="7"/><text x="19.3289%" y="191.50">curve..</text></g><g><title>curve25519_dalek::edwards::EdwardsPoint::compress (9 samples, 5.92%)</title><rect x="19.0789%" y="245" width="5.9211%" height="15" fill="rgb(212,68,19)" fg:x="29" fg:w="9"/><text x="19.3289%" y="255.50">curve255..</text></g><g><title>curve25519_dalek::field::&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::invert (9 samples, 5.92%)</title><rect x="19.0789%" y="229" width="5.9211%" height="15" fill="rgb(240,187,13)" fg:x="29" fg:w="9"/><text x="19.3289%" y="239.50">curve255..</text></g><g><title>curve25519_dalek::field::&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::pow22501 (9 samples, 5.92%)</title><rect x="19.0789%" y="213" width="5.9211%" height="15" fill="rgb(223,113,26)" fg:x="29" fg:w="9"/><text x="19.3289%" y="223.50">curve255..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::square (2 samples, 1.32%)</title><rect x="23.6842%" y="197" width="1.3158%" height="15" fill="rgb(206,192,2)" fg:x="36" fg:w="2"/><text x="23.9342%" y="207.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (2 samples, 1.32%)</title><rect x="23.6842%" y="181" width="1.3158%" height="15" fill="rgb(241,108,4)" fg:x="36" fg:w="2"/><text x="23.9342%" y="191.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k::m (1 samples, 0.66%)</title><rect x="24.3421%" y="165" width="0.6579%" height="15" fill="rgb(247,173,49)" fg:x="37" fg:w="1"/><text x="24.5921%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.66%)</title><rect x="27.6316%" y="213" width="0.6579%" height="15" fill="rgb(224,114,35)" fg:x="42" fg:w="1"/><text x="27.8816%" y="223.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::add (1 samples, 0.66%)</title><rect x="28.2895%" y="197" width="0.6579%" height="15" fill="rgb(245,159,27)" fg:x="43" fg:w="1"/><text x="28.5395%" y="207.50"></text></g><g><title>&lt;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::AddAssign&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::add_assign (1 samples, 0.66%)</title><rect x="28.2895%" y="181" width="0.6579%" height="15" fill="rgb(245,172,44)" fg:x="43" fg:w="1"/><text x="28.5395%" y="191.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (2 samples, 1.32%)</title><rect x="28.2895%" y="213" width="1.3158%" height="15" fill="rgb(236,23,11)" fg:x="43" fg:w="2"/><text x="28.5395%" y="223.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.66%)</title><rect x="28.9474%" y="197" width="0.6579%" height="15" fill="rgb(205,117,38)" fg:x="44" fg:w="1"/><text x="29.1974%" y="207.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::ProjectiveNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (1 samples, 0.66%)</title><rect x="29.6053%" y="213" width="0.6579%" height="15" fill="rgb(237,72,25)" fg:x="45" fg:w="1"/><text x="29.8553%" y="223.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Sub&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::sub (1 samples, 0.66%)</title><rect x="29.6053%" y="197" width="0.6579%" height="15" fill="rgb(244,70,9)" fg:x="45" fg:w="1"/><text x="29.8553%" y="207.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::reduce (1 samples, 0.66%)</title><rect x="29.6053%" y="181" width="0.6579%" height="15" fill="rgb(217,125,39)" fg:x="45" fg:w="1"/><text x="29.8553%" y="191.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::&lt;impl core::ops::arith::Sub&lt;&amp;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::sub (1 samples, 0.66%)</title><rect x="30.2632%" y="213" width="0.6579%" height="15" fill="rgb(235,36,10)" fg:x="46" fg:w="1"/><text x="30.5132%" y="223.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.66%)</title><rect x="30.2632%" y="197" width="0.6579%" height="15" fill="rgb(251,123,47)" fg:x="46" fg:w="1"/><text x="30.5132%" y="207.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul::m (1 samples, 0.66%)</title><rect x="30.2632%" y="181" width="0.6579%" height="15" fill="rgb(221,13,13)" fg:x="46" fg:w="1"/><text x="30.5132%" y="191.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::add (1 samples, 0.66%)</title><rect x="30.9211%" y="197" width="0.6579%" height="15" fill="rgb(238,131,9)" fg:x="47" fg:w="1"/><text x="31.1711%" y="207.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::&lt;impl core::ops::arith::Sub&lt;&amp;curve25519_dalek::backend::serial::curve_models::ProjectiveNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::sub (2 samples, 1.32%)</title><rect x="30.9211%" y="213" width="1.3158%" height="15" fill="rgb(211,50,8)" fg:x="47" fg:w="2"/><text x="31.1711%" y="223.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Sub&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::sub (1 samples, 0.66%)</title><rect x="31.5789%" y="197" width="0.6579%" height="15" fill="rgb(245,182,24)" fg:x="48" fg:w="1"/><text x="31.8289%" y="207.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::reduce (1 samples, 0.66%)</title><rect x="31.5789%" y="181" width="0.6579%" height="15" fill="rgb(242,14,37)" fg:x="48" fg:w="1"/><text x="31.8289%" y="191.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::CompletedPoint::to_extended (10 samples, 6.58%)</title><rect x="32.2368%" y="213" width="6.5789%" height="15" fill="rgb(246,228,12)" fg:x="49" fg:w="10"/><text x="32.4868%" y="223.50">curve2551..</text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (10 samples, 6.58%)</title><rect x="32.2368%" y="197" width="6.5789%" height="15" fill="rgb(213,55,15)" fg:x="49" fg:w="10"/><text x="32.4868%" y="207.50">&lt;&amp;curve25..</text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul::m (5 samples, 3.29%)</title><rect x="35.5263%" y="181" width="3.2895%" height="15" fill="rgb(209,9,3)" fg:x="54" fg:w="5"/><text x="35.7763%" y="191.50">&lt;&amp;c..</text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (36 samples, 23.68%)</title><rect x="38.8158%" y="197" width="23.6842%" height="15" fill="rgb(230,59,30)" fg:x="59" fg:w="36"/><text x="39.0658%" y="207.50">&lt;&amp;curve25519_dalek::backend::serial::u..</text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul::m (13 samples, 8.55%)</title><rect x="53.9474%" y="181" width="8.5526%" height="15" fill="rgb(209,121,21)" fg:x="82" fg:w="13"/><text x="54.1974%" y="191.50">&lt;&amp;curve25519..</text></g><g><title>curve25519_dalek::backend::serial::curve_models::CompletedPoint::to_projective (37 samples, 24.34%)</title><rect x="38.8158%" y="213" width="24.3421%" height="15" fill="rgb(220,109,13)" fg:x="59" fg:w="37"/><text x="39.0658%" y="223.50">curve25519_dalek::backend::serial::curv..</text></g><g><title>[receive_sent] (1 samples, 0.66%)</title><rect x="62.5000%" y="197" width="0.6579%" height="15" fill="rgb(232,18,1)" fg:x="95" fg:w="1"/><text x="62.7500%" y="207.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.66%)</title><rect x="62.5000%" y="181" width="0.6579%" height="15" fill="rgb(215,41,42)" fg:x="95" fg:w="1"/><text x="62.7500%" y="191.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::add (2 samples, 1.32%)</title><rect x="65.1316%" y="197" width="1.3158%" height="15" fill="rgb(224,123,36)" fg:x="99" fg:w="2"/><text x="65.3816%" y="207.50"></text></g><g><title>&lt;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::AddAssign&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::add_assign (1 samples, 0.66%)</title><rect x="65.7895%" y="181" width="0.6579%" height="15" fill="rgb(240,125,3)" fg:x="100" fg:w="1"/><text x="66.0395%" y="191.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Sub&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::sub (6 samples, 3.95%)</title><rect x="66.4474%" y="197" width="3.9474%" height="15" fill="rgb(205,98,50)" fg:x="101" fg:w="6"/><text x="66.6974%" y="207.50">&lt;&amp;cu..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::reduce (5 samples, 3.29%)</title><rect x="67.1053%" y="181" width="3.2895%" height="15" fill="rgb(205,185,37)" fg:x="102" fg:w="5"/><text x="67.3553%" y="191.50">cur..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::square (1 samples, 0.66%)</title><rect x="70.3947%" y="197" width="0.6579%" height="15" fill="rgb(238,207,15)" fg:x="107" fg:w="1"/><text x="70.6447%" y="207.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::square2 (6 samples, 3.95%)</title><rect x="71.0526%" y="197" width="3.9474%" height="15" fill="rgb(213,199,42)" fg:x="108" fg:w="6"/><text x="71.3026%" y="207.50">curv..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (5 samples, 3.29%)</title><rect x="71.7105%" y="181" width="3.2895%" height="15" fill="rgb(235,201,11)" fg:x="109" fg:w="5"/><text x="71.9605%" y="191.50">cur..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k::m (3 samples, 1.97%)</title><rect x="73.0263%" y="165" width="1.9737%" height="15" fill="rgb(207,46,11)" fg:x="111" fg:w="3"/><text x="73.2763%" y="175.50">c..</text></g><g><title>curve25519_dalek::backend::serial::curve_models::ProjectivePoint::double (47 samples, 30.92%)</title><rect x="63.1579%" y="213" width="30.9211%" height="15" fill="rgb(241,35,35)" fg:x="96" fg:w="47"/><text x="63.4079%" y="223.50">curve25519_dalek::backend::serial::curve_models::P..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::square (29 samples, 19.08%)</title><rect x="75.0000%" y="197" width="19.0789%" height="15" fill="rgb(243,32,47)" fg:x="114" fg:w="29"/><text x="75.2500%" y="207.50">curve25519_dalek::backend::ser..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (29 samples, 19.08%)</title><rect x="75.0000%" y="181" width="19.0789%" height="15" fill="rgb(247,202,23)" fg:x="114" fg:w="29"/><text x="75.2500%" y="191.50">curve25519_dalek::backend::ser..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k::m (7 samples, 4.61%)</title><rect x="89.4737%" y="165" width="4.6053%" height="15" fill="rgb(219,102,11)" fg:x="136" fg:w="7"/><text x="89.7237%" y="175.50">curve..</text></g><g><title>curve25519_dalek::scalar::Scalar::non_adjacent_form (2 samples, 1.32%)</title><rect x="94.0789%" y="213" width="1.3158%" height="15" fill="rgb(243,110,44)" fg:x="143" fg:w="2"/><text x="94.3289%" y="223.50"></text></g><g><title>curve25519_dalek::edwards::EdwardsPoint::vartime_double_scalar_mul_basepoint (108 samples, 71.05%)</title><rect x="25.0000%" y="245" width="71.0526%" height="15" fill="rgb(222,74,54)" fg:x="38" fg:w="108"/><text x="25.2500%" y="255.50">curve25519_dalek::edwards::EdwardsPoint::vartime_double_scalar_mul_basepoint</text></g><g><title>curve25519_dalek::backend::serial::scalar_mul::vartime_double_base::mul (108 samples, 71.05%)</title><rect x="25.0000%" y="229" width="71.0526%" height="15" fill="rgb(216,99,12)" fg:x="38" fg:w="108"/><text x="25.2500%" y="239.50">curve25519_dalek::backend::serial::scalar_mul::vartime_double_base::mul</text></g><g><title>curve25519_dalek::window::NafLookupTable5&lt;T&gt;::select (1 samples, 0.66%)</title><rect x="95.3947%" y="213" width="0.6579%" height="15" fill="rgb(226,22,26)" fg:x="145" fg:w="1"/><text x="95.6447%" y="223.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (1 samples, 0.66%)</title><rect x="96.0526%" y="229" width="0.6579%" height="15" fill="rgb(217,163,10)" fg:x="146" fg:w="1"/><text x="96.3026%" y="239.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (1 samples, 0.66%)</title><rect x="96.0526%" y="213" width="0.6579%" height="15" fill="rgb(213,25,53)" fg:x="146" fg:w="1"/><text x="96.3026%" y="223.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (1 samples, 0.66%)</title><rect x="96.0526%" y="197" width="0.6579%" height="15" fill="rgb(252,105,26)" fg:x="146" fg:w="1"/><text x="96.3026%" y="207.50"></text></g><g><title>&lt;sha2::sha512::Sha512 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (1 samples, 0.66%)</title><rect x="96.0526%" y="181" width="0.6579%" height="15" fill="rgb(220,39,43)" fg:x="146" fg:w="1"/><text x="96.3026%" y="191.50"></text></g><g><title>sha2::sha512::Engine512::finish (1 samples, 0.66%)</title><rect x="96.0526%" y="165" width="0.6579%" height="15" fill="rgb(229,68,48)" fg:x="146" fg:w="1"/><text x="96.3026%" y="175.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len128_padding_be (1 samples, 0.66%)</title><rect x="96.0526%" y="149" width="0.6579%" height="15" fill="rgb(252,8,32)" fg:x="146" fg:w="1"/><text x="96.3026%" y="159.50"></text></g><g><title>sha2::sha512::Engine512::finish::{{closure}} (1 samples, 0.66%)</title><rect x="96.0526%" y="133" width="0.6579%" height="15" fill="rgb(223,20,43)" fg:x="146" fg:w="1"/><text x="96.3026%" y="143.50"></text></g><g><title>sha2::sha512::compress512 (1 samples, 0.66%)</title><rect x="96.0526%" y="117" width="0.6579%" height="15" fill="rgb(229,81,49)" fg:x="146" fg:w="1"/><text x="96.3026%" y="127.50"></text></g><g><title>sha2::sha512::x86::compress (1 samples, 0.66%)</title><rect x="96.0526%" y="101" width="0.6579%" height="15" fill="rgb(236,28,36)" fg:x="146" fg:w="1"/><text x="96.3026%" y="111.50"></text></g><g><title>sha2::sha512::x86::sha512_compress_x86_64_avx2 (1 samples, 0.66%)</title><rect x="96.0526%" y="85" width="0.6579%" height="15" fill="rgb(249,185,26)" fg:x="146" fg:w="1"/><text x="96.3026%" y="95.50"></text></g><g><title>sha2::sha512::x86::sha512_compress_x86_64_avx (1 samples, 0.66%)</title><rect x="96.0526%" y="69" width="0.6579%" height="15" fill="rgb(249,174,33)" fg:x="146" fg:w="1"/><text x="96.3026%" y="79.50"></text></g><g><title>sha2::sha512::x86::rounds_0_63_avx (1 samples, 0.66%)</title><rect x="96.0526%" y="53" width="0.6579%" height="15" fill="rgb(233,201,37)" fg:x="146" fg:w="1"/><text x="96.3026%" y="63.50"></text></g><g><title>sha2::sha512::x86::sha_round (1 samples, 0.66%)</title><rect x="96.0526%" y="37" width="0.6579%" height="15" fill="rgb(221,78,26)" fg:x="146" fg:w="1"/><text x="96.3026%" y="47.50"></text></g><g><title>&lt;ed25519_dalek::public::PublicKey as signature::verifier::Verifier&lt;ed25519::Signature&gt;&gt;::verify (119 samples, 78.29%)</title><rect x="19.0789%" y="261" width="78.2895%" height="15" fill="rgb(250,127,30)" fg:x="29" fg:w="119"/><text x="19.3289%" y="271.50">&lt;ed25519_dalek::public::PublicKey as signature::verifier::Verifier&lt;ed25519::Signature&gt;&gt;::verify</text></g><g><title>curve25519_dalek::scalar::Scalar::from_hash (2 samples, 1.32%)</title><rect x="96.0526%" y="245" width="1.3158%" height="15" fill="rgb(230,49,44)" fg:x="146" fg:w="2"/><text x="96.3026%" y="255.50"></text></g><g><title>curve25519_dalek::scalar::Scalar::from_bytes_mod_order_wide (1 samples, 0.66%)</title><rect x="96.7105%" y="229" width="0.6579%" height="15" fill="rgb(229,67,23)" fg:x="147" fg:w="1"/><text x="96.9605%" y="239.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::scalar::Scalar52::from_bytes_wide (1 samples, 0.66%)</title><rect x="96.7105%" y="213" width="0.6579%" height="15" fill="rgb(249,83,47)" fg:x="147" fg:w="1"/><text x="96.9605%" y="223.50"></text></g><g><title>ed25519_dalek::public::PublicKey::from_bytes (3 samples, 1.97%)</title><rect x="97.3684%" y="261" width="1.9737%" height="15" fill="rgb(215,43,3)" fg:x="148" fg:w="3"/><text x="97.6184%" y="271.50">e..</text></g><g><title>curve25519_dalek::edwards::CompressedEdwardsY::decompress (3 samples, 1.97%)</title><rect x="97.3684%" y="245" width="1.9737%" height="15" fill="rgb(238,154,13)" fg:x="148" fg:w="3"/><text x="97.6184%" y="255.50">c..</text></g><g><title>curve25519_dalek::field::&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::sqrt_ratio_i (3 samples, 1.97%)</title><rect x="97.3684%" y="229" width="1.9737%" height="15" fill="rgb(219,56,2)" fg:x="148" fg:w="3"/><text x="97.6184%" y="239.50">c..</text></g><g><title>curve25519_dalek::field::&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::pow_p58 (3 samples, 1.97%)</title><rect x="97.3684%" y="213" width="1.9737%" height="15" fill="rgb(233,0,4)" fg:x="148" fg:w="3"/><text x="97.6184%" y="223.50">c..</text></g><g><title>curve25519_dalek::field::&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::pow22501 (3 samples, 1.97%)</title><rect x="97.3684%" y="197" width="1.9737%" height="15" fill="rgb(235,30,7)" fg:x="148" fg:w="3"/><text x="97.6184%" y="207.50">c..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (3 samples, 1.97%)</title><rect x="97.3684%" y="181" width="1.9737%" height="15" fill="rgb(250,79,13)" fg:x="148" fg:w="3"/><text x="97.6184%" y="191.50">c..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k::m (2 samples, 1.32%)</title><rect x="98.0263%" y="165" width="1.3158%" height="15" fill="rgb(211,146,34)" fg:x="149" fg:w="2"/><text x="98.2763%" y="175.50"></text></g><g><title>all (152 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="152"/><text x="0.2500%" y="575.50"></text></g><g><title>receive_sent (147 samples, 96.71%)</title><rect x="3.2895%" y="549" width="96.7105%" height="15" fill="rgb(235,168,5)" fg:x="5" fg:w="147"/><text x="3.5395%" y="559.50">receive_sent</text></g><g><title>_start (129 samples, 84.87%)</title><rect x="15.1316%" y="533" width="84.8684%" height="15" fill="rgb(221,155,16)" fg:x="23" fg:w="129"/><text x="15.3816%" y="543.50">_start</text></g><g><title>__libc_start_main (129 samples, 84.87%)</title><rect x="15.1316%" y="517" width="84.8684%" height="15" fill="rgb(215,215,53)" fg:x="23" fg:w="129"/><text x="15.3816%" y="527.50">__libc_start_main</text></g><g><title>main (129 samples, 84.87%)</title><rect x="15.1316%" y="501" width="84.8684%" height="15" fill="rgb(223,4,10)" fg:x="23" fg:w="129"/><text x="15.3816%" y="511.50">main</text></g><g><title>std::rt::lang_start_internal (129 samples, 84.87%)</title><rect x="15.1316%" y="485" width="84.8684%" height="15" fill="rgb(234,103,6)" fg:x="23" fg:w="129"/><text x="15.3816%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (129 samples, 84.87%)</title><rect x="15.1316%" y="469" width="84.8684%" height="15" fill="rgb(227,97,0)" fg:x="23" fg:w="129"/><text x="15.3816%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (129 samples, 84.87%)</title><rect x="15.1316%" y="453" width="84.8684%" height="15" fill="rgb(234,150,53)" fg:x="23" fg:w="129"/><text x="15.3816%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (129 samples, 84.87%)</title><rect x="15.1316%" y="437" width="84.8684%" height="15" fill="rgb(228,201,54)" fg:x="23" fg:w="129"/><text x="15.3816%" y="447.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (129 samples, 84.87%)</title><rect x="15.1316%" y="421" width="84.8684%" height="15" fill="rgb(222,22,37)" fg:x="23" fg:w="129"/><text x="15.3816%" y="431.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (129 samples, 84.87%)</title><rect x="15.1316%" y="405" width="84.8684%" height="15" fill="rgb(237,53,32)" fg:x="23" fg:w="129"/><text x="15.3816%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (129 samples, 84.87%)</title><rect x="15.1316%" y="389" width="84.8684%" height="15" fill="rgb(233,25,53)" fg:x="23" fg:w="129"/><text x="15.3816%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (129 samples, 84.87%)</title><rect x="15.1316%" y="373" width="84.8684%" height="15" fill="rgb(210,40,34)" fg:x="23" fg:w="129"/><text x="15.3816%" y="383.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (129 samples, 84.87%)</title><rect x="15.1316%" y="357" width="84.8684%" height="15" fill="rgb(241,220,44)" fg:x="23" fg:w="129"/><text x="15.3816%" y="367.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (129 samples, 84.87%)</title><rect x="15.1316%" y="341" width="84.8684%" height="15" fill="rgb(235,28,35)" fg:x="23" fg:w="129"/><text x="15.3816%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (129 samples, 84.87%)</title><rect x="15.1316%" y="325" width="84.8684%" height="15" fill="rgb(210,56,17)" fg:x="23" fg:w="129"/><text x="15.3816%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (129 samples, 84.87%)</title><rect x="15.1316%" y="309" width="84.8684%" height="15" fill="rgb(224,130,29)" fg:x="23" fg:w="129"/><text x="15.3816%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>receive_sent::main (129 samples, 84.87%)</title><rect x="15.1316%" y="293" width="84.8684%" height="15" fill="rgb(235,212,8)" fg:x="23" fg:w="129"/><text x="15.3816%" y="303.50">receive_sent::main</text></g><g><title>hecate::receiver::check_message (129 samples, 84.87%)</title><rect x="15.1316%" y="277" width="84.8684%" height="15" fill="rgb(223,33,50)" fg:x="23" fg:w="129"/><text x="15.3816%" y="287.50">hecate::receiver::check_message</text></g><g><title>libsignal_protocol::crypto::hmac_sha256 (1 samples, 0.66%)</title><rect x="99.3421%" y="261" width="0.6579%" height="15" fill="rgb(219,149,13)" fg:x="151" fg:w="1"/><text x="99.5921%" y="271.50"></text></g><g><title>&lt;hmac::Hmac&lt;D&gt; as crypto_mac::NewMac&gt;::new_from_slice (1 samples, 0.66%)</title><rect x="99.3421%" y="245" width="0.6579%" height="15" fill="rgb(250,156,29)" fg:x="151" fg:w="1"/><text x="99.5921%" y="255.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::Update&gt;::update (1 samples, 0.66%)</title><rect x="99.3421%" y="229" width="0.6579%" height="15" fill="rgb(216,193,19)" fg:x="151" fg:w="1"/><text x="99.5921%" y="239.50"></text></g><g><title>sha2::sha256::Engine256::update (1 samples, 0.66%)</title><rect x="99.3421%" y="213" width="0.6579%" height="15" fill="rgb(216,135,14)" fg:x="151" fg:w="1"/><text x="99.5921%" y="223.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::input_blocks (1 samples, 0.66%)</title><rect x="99.3421%" y="197" width="0.6579%" height="15" fill="rgb(241,47,5)" fg:x="151" fg:w="1"/><text x="99.5921%" y="207.50"></text></g><g><title>sha2::sha256::Engine256::update::{{closure}} (1 samples, 0.66%)</title><rect x="99.3421%" y="181" width="0.6579%" height="15" fill="rgb(233,42,35)" fg:x="151" fg:w="1"/><text x="99.5921%" y="191.50"></text></g><g><title>sha2::sha256::compress256 (1 samples, 0.66%)</title><rect x="99.3421%" y="165" width="0.6579%" height="15" fill="rgb(231,13,6)" fg:x="151" fg:w="1"/><text x="99.5921%" y="175.50"></text></g><g><title>sha2::sha256::x86::compress (1 samples, 0.66%)</title><rect x="99.3421%" y="149" width="0.6579%" height="15" fill="rgb(207,181,40)" fg:x="151" fg:w="1"/><text x="99.5921%" y="159.50"></text></g><g><title>sha2::sha256::soft::compress (1 samples, 0.66%)</title><rect x="99.3421%" y="133" width="0.6579%" height="15" fill="rgb(254,173,49)" fg:x="151" fg:w="1"/><text x="99.5921%" y="143.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.66%)</title><rect x="99.3421%" y="117" width="0.6579%" height="15" fill="rgb(221,1,38)" fg:x="151" fg:w="1"/><text x="99.5921%" y="127.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.66%)</title><rect x="99.3421%" y="101" width="0.6579%" height="15" fill="rgb(206,124,46)" fg:x="151" fg:w="1"/><text x="99.5921%" y="111.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.66%)</title><rect x="99.3421%" y="85" width="0.6579%" height="15" fill="rgb(249,21,11)" fg:x="151" fg:w="1"/><text x="99.5921%" y="95.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (1 samples, 0.66%)</title><rect x="99.3421%" y="69" width="0.6579%" height="15" fill="rgb(222,201,40)" fg:x="151" fg:w="1"/><text x="99.5921%" y="79.50"></text></g></svg></svg>